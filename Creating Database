import pandas as pd
import sqlite3
import requests

#connecting to DB
conn = sqlite3.connect("C:/Users/julie/Documents/Databases/Forex.db")

#creating cursor
cur = conn.cursor()

#creating TABLE for the currencies
cur.execute('''CREATE TABLE if not exists currencies (
    currCode      VARCHAR (3)   PRIMARY KEY
                                UNIQUE ON CONFLICT IGNORE
                                NOT NULL,
    description   VARCHAR (255) NOT NULL,
    currSelection VARCHAR (5)   DEFAULT (False) 
                                NOT NULL
)
WITHOUT ROWID; ''')

#loading currencies data from FrankfurterAPI to our table 
response = requests.get("http://api.frankfurter.app/currencies")
file = response.json()
okcurr = ['BRL', 'GBP', 'SEK', 'THB', 'USD']
for key,value in file.items():
    if key in okcurr:
        dict = {'currCode':key, 'description':value, 'currSelection':'TRUE'}
    else:
        dict = {'currCode':key, 'description':value, 'currSelection':'FALSE'}
    cur.execute('''INSERT INTO currencies
                    (currCode, description, currSelection)
                    VALUES
                    (:currCode, :description, :currSelection);''', dict)
    conn.commit()
        

#creating transactions TABLE and VIEW
cur.execute('''CREATE TABLE if not exists transactions (
    date           DATE            NOT NULL,
    currCode                       REFERENCES currencies (currCode) 
                                   NOT NULL,
    actualRate     DECIMAL (10, 5),
    source         VARCHAR (20),
    forecastedRate DECIMAL (10, 5),
    forecastError  DECIMAL (10, 5), 
    UNIQUE (date, currCode) ON CONFLICT REPLACE
)
;''')

cur.execute('''CREATE VIEW transview AS
    SELECT transactions.date,
           transactions.currCode,
           currencies.description,
           transactions.actualRate,
           transactions.source,
           transactions.forecastedRate,
           transactions.forecastError
      FROM transactions
           INNER JOIN
           currencies ON (transactions.currCode = currencies.currCode);

''')

#Loading historical rates for selected currencies since beginning of year
rates = requests.get("http://api.frankfurter.app/2020-01-01..2020-12-17?to=USD,GBP,BRL,SEK,THB")
ratesfile = rates.json()

for key,value in ratesfile.items():
    if key == 'rates':
        dict1 = value
        for key, value in dict1.items():
            dict2 = value
            date = key
            for key,value in dict2.items():
                dict3 = {'date':date, 'currCode':key, 'actualRate':value, 'source': 'FrankfurterAPI'}
                cur.execute('''INSERT INTO transactions
                            (date, currCode, actualRate, source)
                            VALUES
                            (:date, :currCode, :actualRate, :source);''', dict3)
                conn.commit()
